<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on Kona4 Blog</title>
    <link>https://kona4.com/tags/php/</link>
    <description>Recent content in PHP on Kona4 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 16 Dec 2020 12:24:01 +0000</lastBuildDate><atom:link href="https://kona4.com/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHPでテストを書く（PHPUnit）</title>
      <link>https://kona4.com/post/2020/12/16/122401/</link>
      <pubDate>Wed, 16 Dec 2020 12:24:01 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/12/16/122401/</guid>
      <description>&lt;h2 id=&#34;自動テストの重要性&#34;&gt;自動テストの重要性&lt;/h2&gt;
&lt;p&gt;コードを書き換えた後、再テストには大きな労力がかかる。 =&amp;gt; &lt;!-- raw HTML omitted --&gt;自動テスト&lt;!-- raw HTML omitted --&gt;という仕組みが役に立つ。&lt;/p&gt;
&lt;p&gt;参考書籍に則り、&lt;!-- raw HTML omitted --&gt;PHPUnit&lt;!-- raw HTML omitted --&gt;という自動テストツールを使用する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>簡単なRESTful APIサーバーを作ってみる</title>
      <link>https://kona4.com/post/2020/12/14/100351/</link>
      <pubDate>Mon, 14 Dec 2020 10:03:51 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/12/14/100351/</guid>
      <description>&lt;h2 id=&#34;restful-apiって&#34;&gt;RESTful APIって？&lt;/h2&gt;
&lt;p&gt;標準的なWebAPIの設計方式。&lt;br&gt;
リソースに対するURLを1つだけ用意し、HTTPメソッドの切り替えで操作を表す。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【PHP】正規表現メモ</title>
      <link>https://kona4.com/post/2020/12/09/110055/</link>
      <pubDate>Wed, 09 Dec 2020 11:00:55 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/12/09/110055/</guid>
      <description>目的: CSSプロパティで指定された画像URLを取り出したい background-image: url( https://xxxxx.png );&amp;lt;!--?php--&amp;gt; function cutOutUrl($url) { preg_match(&amp;amp;#39;/(https).*\.(png|jpg|jpeg)/i&amp;amp;#39;, $url, $match);  return $match[0] ?? null; } $url = cutOutUrl(&amp;#34;background-image: url( https://xxxxx.png );&amp;#34;); echo $url; $ php index.php &amp;#34;https://xxxxx.png&amp;#34; </description>
    </item>
    
    <item>
      <title>PHPでLINE Messaging APIを使う</title>
      <link>https://kona4.com/post/2020/11/18/004646/</link>
      <pubDate>Wed, 18 Nov 2020 00:46:46 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/11/18/004646/</guid>
      <description>この記事は、LINE Developersコンソールでチャネルを作成済み。GitHubでリポジトリを作成済み。herokuにアカウントを作成済み。であることが前提です。LINE Developersのチャネルはここからすぐに作成できます！GitHubはlinebotという名前でリポジトリを作成しました。
環境 macOS Catalina バージョン 10.15.7PHP 7.3.11Composer 2.0.7
herokuでアプリを作成し、GitHubと連携する linebot-echoappという名前でアプリを作成しました。
LINE Messaging API SDKをインストールする $touch index.php$composer require linecorp/line-bot-sdkとりあえずPHPファイルを編集しておきます。
&amp;lt;!--?php--&amp;gt; echo &amp;#34;hello&amp;#34;; GitHubへpush。git add .git commit -m &amp;ldquo;first commit&amp;rdquo;git push origin mainここまで終了したら、ページを開いて先程作ったPHPファイルが反映されているか確認します。herokuページ上部のOpen appをクリックするとページが開きます。
Webhook URLを設定する LINE Developersで作成したチャネル内で、
botを友だちに追加 Messaging APIタブにあるQRコードから友だち追加しておきます。
メッセージをオウム返しする 送信したメッセージをオウム返しするコードをLINE Messaging API SDKやQiitaの記事を参考に作成しました。
&amp;lt;!--?php--&amp;gt; require(&amp;amp;#39;vendor/autoload.php&amp;amp;#39;);  use LINE\LINEBot\Constant\HTTPHeader; use LINE\LINEBot\HTTPClient\CurlHTTPClient; use LINE\LINEBot; // Channel access tokenとChannel secretを設定 $channel_access_token = &amp;amp;#39;XXXXXXXXX&amp;amp;#39;; $channel_secret = &amp;amp;#39;XXXXXXXXX&amp;amp;#39;;  $httpClient = new CurlHTTPClient($channel_access_token); $bot = new LINEBot($httpClient, [&amp;amp;#39;channelSecret&amp;amp;#39; =&amp;gt; $channel_secret]);  $events = $bot-&amp;gt;parseEventRequest(file_get_contents(&amp;amp;#39;php://input&amp;amp;#39;), $_SERVER[&amp;amp;#39;HTTP_&amp;amp;#39; .</description>
    </item>
    
  </channel>
</rss>
