<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on Kona4 Blog</title>
    <link>https://kona4.com/tags/php/</link>
    <description>Recent content in PHP on Kona4 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 16 Dec 2020 12:24:01 +0000</lastBuildDate><atom:link href="https://kona4.com/tags/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PHPでテストを書く（PHPUnit）</title>
      <link>https://kona4.com/post/2020/12/16/122401/</link>
      <pubDate>Wed, 16 Dec 2020 12:24:01 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/12/16/122401/</guid>
      <description>自動テストの重要性 コードを書き換えた後、再テストには大きな労力がかかる。 =&amp;gt; 自動テストという仕組みが役に立つ。
参考書籍に則り、PHPUnitという自動テストツールを使用する。
他にも様々なツールがあるみたい。
PHPの自動テストフレームワークってどんなんがあるん？PHPUnitのインストール PHPUnitのインストール
composer require --dev phpunit/phpunit テストの書き方 実行 ファイル名: MyTest.php
&amp;lt;!--?php--&amp;gt; require_once dirname(__FILE__) . &amp;amp;#39;/vendor/autoload.php&amp;amp;#39;;  use PHPUnit\Framework\TestCase; class MyTest extends TestCase { // テスト処理  public function test1() { $array = [1, 5, 10]; // 配列（$array）の要素数が３つであることをテストする。  $this-&amp;gt;assertCount(3, $array); } public function test2() { $num1 = 1; $num2 = 1; // ２つの値が型も含めて等しいことをテストする。  $this-&amp;gt;assertSame($num1, $num2); } public function test3() { $text = &amp;#34;hello&amp;#34;; // 値が空であることをテストする。  $this-&amp;gt;assertEmpty($text); } } 実行.</description>
    </item>
    
    <item>
      <title>簡単なRESTful APIサーバーを作ってみる</title>
      <link>https://kona4.com/post/2020/12/14/100351/</link>
      <pubDate>Mon, 14 Dec 2020 10:03:51 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/12/14/100351/</guid>
      <description>RESTful APIって？ 標準的なWebAPIの設計方式。リソースに対するURLを1つだけ用意し、HTTPメソッドの切り替えで操作を表す。
例 RESTful APIはステートレスであるべき ステートレス = WebAPIサーバはセッション変数を持つべきではない。サーバ間で共有ができなくなる。などの問題があるから。スケーラビリティの問題。（今後サーバを増やしたいときとか）
PHPでRESTfulAPIサーバ、クライアントの作成 環境 macOS BigSur 11.0.1
PHP 7.3.22
MAMP 5.7
サーバサイドのPHPファイルを作成 &amp;lt;!--?php--&amp;gt; declare(strict_types=1); // GET function getMessage() { $res = [ &amp;amp;#39;status&amp;amp;#39; =&amp;gt; &amp;amp;#39;success&amp;amp;#39;,  &amp;amp;#39;message&amp;amp;#39; =&amp;gt; &amp;amp;#39;ユーザ: &amp;amp;#39; . $_GET[&amp;amp;#39;userName&amp;amp;#39;] . &amp;amp;#39;の好きな食べ物は、&amp;amp;#39; . $_GET[&amp;amp;#39;food&amp;amp;#39;] . &amp;amp;#39;です。&amp;amp;#39;,  ]; return $res; } //POST function postMessage() { $res = [ &amp;amp;#39;status&amp;amp;#39; =&amp;gt; &amp;amp;#39;success&amp;amp;#39;,  &amp;amp;#39;message&amp;amp;#39; =&amp;gt; &amp;amp;#39;ユーザ: &amp;amp;#39; . $_POST[&amp;amp;#39;userName&amp;amp;#39;] . &amp;amp;#39;の好きな食べ物を、&amp;amp;#39; . $_POST[&amp;amp;#39;food&amp;amp;#39;] .</description>
    </item>
    
    <item>
      <title>【PHP】正規表現メモ</title>
      <link>https://kona4.com/post/2020/12/09/110055/</link>
      <pubDate>Wed, 09 Dec 2020 11:00:55 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/12/09/110055/</guid>
      <description>目的: CSSプロパティで指定された画像URLを取り出したい background-image: url( https://xxxxx.png );&amp;lt;!--?php--&amp;gt; function cutOutUrl($url) { preg_match(&amp;amp;#39;/(https).*\.(png|jpg|jpeg)/i&amp;amp;#39;, $url, $match);  return $match[0] ?? null; } $url = cutOutUrl(&amp;#34;background-image: url( https://xxxxx.png );&amp;#34;); echo $url; $ php index.php &amp;#34;https://xxxxx.png&amp;#34; </description>
    </item>
    
    <item>
      <title>PHPでLINE Messaging APIを使う</title>
      <link>https://kona4.com/post/2020/11/18/004646/</link>
      <pubDate>Wed, 18 Nov 2020 00:46:46 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/11/18/004646/</guid>
      <description>この記事は、LINE Developersコンソールでチャネルを作成済み。GitHubでリポジトリを作成済み。herokuにアカウントを作成済み。であることが前提です。LINE Developersのチャネルはここからすぐに作成できます！GitHubはlinebotという名前でリポジトリを作成しました。
環境 macOS Catalina バージョン 10.15.7PHP 7.3.11Composer 2.0.7
herokuでアプリを作成し、GitHubと連携する linebot-echoappという名前でアプリを作成しました。
LINE Messaging API SDKをインストールする $touch index.php$composer require linecorp/line-bot-sdkとりあえずPHPファイルを編集しておきます。
&amp;lt;!--?php--&amp;gt; echo &amp;#34;hello&amp;#34;; GitHubへpush。git add .git commit -m &amp;ldquo;first commit&amp;rdquo;git push origin mainここまで終了したら、ページを開いて先程作ったPHPファイルが反映されているか確認します。herokuページ上部のOpen appをクリックするとページが開きます。
Webhook URLを設定する LINE Developersで作成したチャネル内で、
botを友だちに追加 Messaging APIタブにあるQRコードから友だち追加しておきます。
メッセージをオウム返しする 送信したメッセージをオウム返しするコードをLINE Messaging API SDKやQiitaの記事を参考に作成しました。
&amp;lt;!--?php--&amp;gt; require(&amp;amp;#39;vendor/autoload.php&amp;amp;#39;);  use LINE\LINEBot\Constant\HTTPHeader; use LINE\LINEBot\HTTPClient\CurlHTTPClient; use LINE\LINEBot; // Channel access tokenとChannel secretを設定 $channel_access_token = &amp;amp;#39;XXXXXXXXX&amp;amp;#39;; $channel_secret = &amp;amp;#39;XXXXXXXXX&amp;amp;#39;;  $httpClient = new CurlHTTPClient($channel_access_token); $bot = new LINEBot($httpClient, [&amp;amp;#39;channelSecret&amp;amp;#39; =&amp;gt; $channel_secret]);  $events = $bot-&amp;gt;parseEventRequest(file_get_contents(&amp;amp;#39;php://input&amp;amp;#39;), $_SERVER[&amp;amp;#39;HTTP_&amp;amp;#39; .</description>
    </item>
    
  </channel>
</rss>
