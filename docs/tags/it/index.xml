<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IT on Kona4 Blog</title>
    <link>https://kona4.com/tags/it/</link>
    <description>Recent content in IT on Kona4 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 17 Dec 2020 14:13:16 +0000</lastBuildDate><atom:link href="https://kona4.com/tags/it/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>curlコマンドでnoteからデータを取得してみる</title>
      <link>https://kona4.com/post/2020/12/17/141316/</link>
      <pubDate>Thu, 17 Dec 2020 14:13:16 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/12/17/141316/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;使い方を公式で説明しているわけではないが、&lt;a href=&#34;https://note.com/&#34;&gt;note&lt;/a&gt;にはAPIがあるみたい。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://note.com/hagure_melon/n/n964ff6f7ad0e&#34;&gt;【2020年度】noteのAPI一覧【完全版】&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;curlコマンドの使い方を学ぶついでに、noteに投稿されている記事のタイトルを取得してみる。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PHPでテストを書く（PHPUnit）</title>
      <link>https://kona4.com/post/2020/12/16/122401/</link>
      <pubDate>Wed, 16 Dec 2020 12:24:01 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/12/16/122401/</guid>
      <description>&lt;h2 id=&#34;自動テストの重要性&#34;&gt;自動テストの重要性&lt;/h2&gt;
&lt;p&gt;コードを書き換えた後、再テストには大きな労力がかかる。 =&amp;gt; &lt;!-- raw HTML omitted --&gt;自動テスト&lt;!-- raw HTML omitted --&gt;という仕組みが役に立つ。&lt;/p&gt;
&lt;p&gt;参考書籍に則り、&lt;!-- raw HTML omitted --&gt;PHPUnit&lt;!-- raw HTML omitted --&gt;という自動テストツールを使用する。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>簡単なRESTful APIサーバーを作ってみる</title>
      <link>https://kona4.com/post/2020/12/14/100351/</link>
      <pubDate>Mon, 14 Dec 2020 10:03:51 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/12/14/100351/</guid>
      <description>&lt;h2 id=&#34;restful-apiって&#34;&gt;RESTful APIって？&lt;/h2&gt;
&lt;p&gt;標準的なWebAPIの設計方式。&lt;br&gt;
リソースに対するURLを1つだけ用意し、HTTPメソッドの切り替えで操作を表す。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【PHP】正規表現メモ</title>
      <link>https://kona4.com/post/2020/12/09/110055/</link>
      <pubDate>Wed, 09 Dec 2020 11:00:55 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/12/09/110055/</guid>
      <description>目的: CSSプロパティで指定された画像URLを取り出したい background-image: url( https://xxxxx.png );
function getUrl($url) { preg_match(&amp;#39;/(https).*\.(png|jpg|jpeg)/i&amp;#39;, $url, $match); return $match[0] ?? null; } $url = getUrl(&amp;#34;background-image: url( https://xxxxx.png );&amp;#34;); echo $url; $ php index.php &amp;#34;https://xxxxx.png&amp;#34; </description>
    </item>
    
    <item>
      <title>Rust環境構築メモ</title>
      <link>https://kona4.com/post/2020/12/04/101225/</link>
      <pubDate>Fri, 04 Dec 2020 10:12:25 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/12/04/101225/</guid>
      <description>&lt;p&gt;Rustの環境構築をする際に、VSCodeの拡張機能である&lt;strong&gt;Remote - Containers&lt;/strong&gt;を使用しました。&lt;br&gt;
&lt;img src=&#34;https://kona4.com/img/2020-12/04-01.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>なぜWWWが誕生したか</title>
      <link>https://kona4.com/post/2020/11/15/102143/</link>
      <pubDate>Sun, 15 Nov 2020 10:21:43 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/11/15/102143/</guid>
      <description>WWWとMCSA Mosaicの登場 wwwが誕生 1989年、素粒子物理学の研究所から考案された。当時、「実験の結果などを世界の研究者と共有したい！」という話になったが、これまであった電子メールなどのやりとりは不便だった。そんな中、欧州原子核研究機構(CERN)に所属していたティム・バーナーズ ＝ リー博士がwwwを提案、開発した。wwwは、HTMLという形式でデータを表現することにした。HTMLはHyper Textという仕組みが画期的で、参照先の文書を瞬時に閲覧することが可能だった。これを表現しているのが、Hyper Linkという形式の記述方法。研究文書の中で参照されている文書をすぐに閲覧でき、その先の文書でも参照先を閲覧することができる。さらにその先の&amp;hellip;と、 インターネット上でのハイパーリンクの繋がりが蜘蛛の巣のように見えることから、World-Wide Web(世界に広がる蜘蛛の巣)と名付けられた。     ブラウザの祖先、NSCA Mosaic www登場当初は、テキストのみの簡素なページであり、画像などは別のページで表示されていた。 現在のWebページのようにテキストと画像が混在できるようにしたのが、イリノイ工科大学のマーク・アンドリーセンらによって開発されたNSCA MosaicというWebブラウザだった。Mosaicは無料で利用が可能であったため、研究の情報共有だけでなく、様々な人が使い始めた。
今でも使用されるWebシステムの基礎 wwwによるハイパーテキストの閲覧は、Webサーバ(Apache HTTP Serverとか)とWebクライアント(Chromeなどのブラウザ)というソフトウェアで実装されている。不特定多数の人に公開される情報(コンテンツ)は一つの場所(Webサーバ)で管理するほうが楽なので、サーバとクライアントに分けている。
ページの住所 見たいページがどこに存在するか？それを一意に特定するための仕組みをURL(Uniform Resource Locator)という。     どの方法でリソースを取得するかを表す。
リソースが存在するホスト(コンピュータ)名を表す。 ホスト名はさらに分解することができる。     さらに、ホストコンピュータ内のどこにあるかを示している。pagesというディレクトリ(フォルダ)の中の、index.htmlが求めているページ。
HTTPの登場 URLの利用によりコンテンツがインターネット上のどこに存在するかは示すことができた。　が、それらコンテンツ(ハイパーテキスト)を異なるコンピュータ間でどのように送受信するか、という問題があった。バーナーズ ＝ リー博士は、すでに存在していたプロトコル(FTP,SMTP)を参考に、HTTP(Hyper Text Transfer Protocol)を考案した。「プロトコル」とは「取り決め」のことで、日本人が「日本語を使って情報を交換しよう！」というふうに会話しているように、WebサーバとWebクライアントでは、「HTTPを使ってハイパーテキストを送受信しよう！」という取り決めを作った。
参考書籍:</description>
    </item>
    
    <item>
      <title>AWSを学び始める</title>
      <link>https://kona4.com/post/2020/05/26/111332/</link>
      <pubDate>Tue, 26 May 2020 11:13:32 +0000</pubDate>
      
      <guid>https://kona4.com/post/2020/05/26/111332/</guid>
      <description>AWSを始めたい理由 以上の点からAWSを学ぼうという気になりました。</description>
    </item>
    
  </channel>
</rss>
